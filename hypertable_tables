#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""

=head1 NAME

Hypertable Tables

=head1 AUTHOR

Jordi Llonch <llonchj@gmail.com>

=head1 LICENSE

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf 

"""

import re
import sys
import json
import copy

from os import chdir, environ
from posixpath import exists, join as join_path

hypertable_home = environ.get('HYPERTABLE_HOME', "/opt/hypertable/current")
monitoring_folder = join_path(hypertable_home, "run/monitoring")
rangeserver_json_path = join_path(monitoring_folder, "rangeserver_summary.json")
table_json_path = join_path(monitoring_folder, "table_summary.json")

graphs = {
    "rangecount": ("Table Range Count", {}),
    "cellcount": ("Table Cell Count", {}),
    "filecount": ("Table File Count", {}),
    "disk": ("Table Disk Usage", {}),
    "memory": ("Table Memory Usage", {}),
    "average_key_size": ("Table Average Key Size", {}),
    "average_value_size": ("Table Average Value Size", {}),
    "compression_ratio": ("Table Compression Ratio", {}),
}

def main():
    """docstring for main"""

    if len(sys.argv) == 2 and sys.argv[1] == "autoconf":
            print "yes" if (exists(monitoring_folder) and 
                            exists(hypertable_home)) else "no"
            exit(0)

    chdir(hypertable_home)

    try:
        tables_summary = open(table_json_path).read()
        tables_summary = json.loads(tables_summary)
    except Exception, exc:
        print >> sys.stderr, "%s retrieving '%s'" % (exc, table_json_path)
        exit (-1)
    else:
        tables = tables_summary['TableSummary']['tables']

    if len(sys.argv) == 2 and sys.argv[1] == "suggest":
        for key in graphs.keys():
            print key
        exit(0)
    elif len(sys.argv) == 2 and sys.argv[1] == "config":

        for key in graphs.keys():
            #key = plugin
            title, extra = graphs[key]

            print "multigraph hypertable_tables_%s" % key

            print 'graph_title %s' % title
            print 'graph_category hypertable'
            print
            for table in tables:
                name = "t" + table["id"].replace("/","_")
                print '%s_%s.label %s' % (name, key, table["name"])
                #print '%s_%s.type %s' % (name, key, _type)
                for k, v in extra.iteritems():
                    print '%s_%s.%s %s' % (name, key, k, v)
            print
        
    else:
        for plugin in graphs.keys():
            print "multigraph hypertable_tables_%s" % plugin
            for table in tables:
                name = "t" + table["id"].replace("/","_")
                value = table[plugin]
                print "%s_%s.value %s" % (name, plugin, value)
            
if __name__ == '__main__':
    main()
